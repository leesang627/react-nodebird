{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useCallback, useState, memo } from 'react';\nimport { Avatar, Button, Card, Comment, Icon, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport moment from 'moment';\nmoment.locale('ko');\nimport { LIKE_POST_REQUEST, LOAD_COMMENTS_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport CommentForm from './CommentForm';\nimport FollowButton from '../components/FollowButton';\nvar CardWrapper = styled.div(_templateObject());\nvar PostCard = memo(function (_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n  var liked = id && post.Likers && post.Likers.find(function (v) {\n    return v.id === id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  });\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: __jsx(FollowButton, {\n      post: post\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  }), moment(post.createdAt).format('YYYY.MM.DD')) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n});\nexport default PostCard;","map":{"version":3,"sources":["/Users/woogler/dev/react-nodebird/front/containers/PostCard.js"],"names":["React","useCallback","useState","memo","Avatar","Button","Card","Comment","Icon","List","Popover","Link","useDispatch","useSelector","styled","moment","locale","LIKE_POST_REQUEST","LOAD_COMMENTS_REQUEST","REMOVE_POST_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","CommentForm","FollowButton","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","dispatch","id","state","user","me","liked","Likers","find","v","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onRemovePost","userId","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","content","createdAt","format","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useCallback,useState, memo } from 'react';\nimport { Avatar, Button, Card, Comment, Icon, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport moment from 'moment';\nmoment.locale('ko');\n\nimport {\n  LIKE_POST_REQUEST,\n  LOAD_COMMENTS_REQUEST, REMOVE_POST_REQUEST,\n  RETWEET_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport CommentForm from './CommentForm';\nimport FollowButton from '../components/FollowButton';\n\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst PostCard = memo(({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.user.me && state.user.me.id);\n\n  const liked = id && post.Likers && post.Likers.find(v => v.id === id);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id,\n      });\n    }\n  }, []);\n\n  const onToggleLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다!');\n    }\n    if (liked) { // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      });\n    } else { // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      });\n    }\n  }, [id, post && post.id, liked]);\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  }, [id, post && post.id]);\n\n  \n\n  const onRemovePost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId,\n    });\n  });\n\n  return (\n    <CardWrapper>\n      <Card\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n          <Icon\n            type=\"heart\"\n            key=\"heart\"\n            theme={liked ? 'twoTone' : 'outlined'}\n            twoToneColor=\"#eb2f96\"\n            onClick={onToggleLike}\n          />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={(\n              <Button.Group>\n                {id && post.UserId === id\n                  ? (\n                    <>\n                      <Button>수정</Button>\n                      <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\n                    </>\n                  )\n                  : <Button>신고</Button>}\n              </Button.Group>\n            )}\n          >\n            <Icon type=\"ellipsis\" />\n          </Popover>,\n        ]}\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\n        extra={<FollowButton post={post}/>}\n      >\n        {post.RetweetId && post.Retweet\n          ? (\n            <Card\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n            >\n              <Card.Meta\n                avatar={(\n                  <Link\n                    href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\n                    as={`/user/${post.Retweet.User.id}`}\n                  >\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                  </Link>\n                )}\n                title={post.Retweet.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />} // a tag x -> Link\n              />\n              {moment(post.createdAt).format('YYYY.MM.DD')}\n            </Card>\n          )\n          : (\n            <Card.Meta\n              avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n              )}\n              title={post.User.nickname}\n              description={<PostCardContent postData={post.content} />} // a tag x -> Link\n            />\n          )}\n      </Card>\n      {commentFormOpened && (\n        <>\n          <CommentForm post={post}/>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={(\n                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                    </Link>\n                  )}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </CardWrapper>\n  );\n});\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string,\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}