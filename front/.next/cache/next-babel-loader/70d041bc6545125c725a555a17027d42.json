{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form, Input } from 'antd';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\"));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["/Users/woogler/dev/react-nodebird/front/containers/CommentForm.js"],"names":["React","useEffect","useState","useCallback","useDispatch","useSelector","Button","Form","Input","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","me","state","user","commentText","setCommentText","commentAdded","isAddingComment","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,WAApC,QAAsD,OAAtD;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AAEA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC9B,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAASR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEgB,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoCd,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACH,IAAhB,CAArD;AAEA,QAAMS,eAAe,GAAGjB,WAAW,CAAEkB,CAAD,IAAO;AACzCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACT,EAAL,EAAS;AACP,aAAOU,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,WAAOX,QAAQ,CAAC;AACdY,MAAAA,IAAI,EAAEf,mBADQ;AAEdgB,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEf,IAAI,CAACgB,EADT;AAEJC,QAAAA,OAAO,EAAEZ;AAFL;AAFQ,KAAD,CAAf;AAOD,GAZkC,EAYhC,CAACH,EAAE,IAAIA,EAAE,CAACc,EAAV,EAAcX,WAAd,CAZgC,CAAnC;AAcAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEN,CAACC,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,QAAMW,mBAAmB,GAAG1B,WAAW,CAAEkB,CAAD,IAAO;AAC7CJ,IAAAA,cAAc,CAACI,CAAC,CAACS,MAAF,CAASC,KAAV,CAAd;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEX;AAAhB,KACE,MAAC,IAAD,CAAM,IAAN,QACE,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAEJ,WAAhC;AAA6C,IAAA,QAAQ,EAAEa;AAAvD,IADF,CADF,EAIE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEV;AAAlD,oBAJF,CADF;AAQD,CApCD;;AA0CA,eAAeT,WAAf","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { Button, Form, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({post}) => {\n  const dispatch = useDispatch();\n  const { me } = useSelector(state => state.user);\n  const [commentText, setCommentText] = useState('');\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText,\n      },\n    });\n  }, [me && me.id, commentText]);\n\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, []);\n\n  return (\n    <Form onSubmit={onSubmitComment}>\n      <Form.Item>\n        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n      </Form.Item>\n      <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n    </Form>\n  )\n}\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n}\n\nexport default CommentForm\n"]},"metadata":{},"sourceType":"module"}