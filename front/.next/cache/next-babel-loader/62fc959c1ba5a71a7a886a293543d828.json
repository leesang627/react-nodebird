{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\n\nconst Post = ({\n  id\n}) => {\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: `${singlePost.User.nickname}님의 글`,\n    description: singlePost.content,\n    meta: [{\n      name: 'description',\n      content: singlePost.content\n    }, {\n      property: 'og:title',\n      content: `${singlePost.User.nickname}님의 게시글`\n    }, {\n      property: 'og:description',\n      content: singlePost.content\n    }, {\n      property: 'og:image',\n      content: singlePost.Images[0] && `http://localhost:3065/${singlePost.Images[0].src}`\n    }, {\n      property: 'og:url',\n      content: `http://localhost:3060/post/${id}`\n    }]\n  }), __jsx(\"div\", {\n    itemScope: \"content\"\n  }, singlePost.content), __jsx(\"div\", {\n    itemScope: \"author\"\n  }, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: `http://localhost:3065/${singlePost.Images[0].src}`\n  })));\n};\n\nPost.getInitialProps = async context => {\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.query.id\n  });\n  return {\n    id: parseInt(context.query.id, 10)\n  };\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/woogler/dev/react-nodebird/front/pages/post.js"],"names":["React","useSelector","Helmet","LOAD_POST_REQUEST","Post","id","singlePost","state","post","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","data","query","parseInt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAlC;AACA,SACE,4BACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAG,GAAEF,UAAU,CAACG,IAAX,CAAgBC,QAAS,MADrC;AAEE,IAAA,WAAW,EAAEJ,UAAU,CAACK,OAF1B;AAGE,IAAA,IAAI,EAAE,CAAC;AACLC,MAAAA,IAAI,EAAE,aADD;AACgBD,MAAAA,OAAO,EAAEL,UAAU,CAACK;AADpC,KAAD,EAEH;AACDE,MAAAA,QAAQ,EAAE,UADT;AACqBF,MAAAA,OAAO,EAAG,GAAEL,UAAU,CAACG,IAAX,CAAgBC,QAAS;AAD1D,KAFG,EAIH;AACDG,MAAAA,QAAQ,EAAE,gBADT;AAC2BF,MAAAA,OAAO,EAAEL,UAAU,CAACK;AAD/C,KAJG,EAMH;AACDE,MAAAA,QAAQ,EAAE,UADT;AACqBF,MAAAA,OAAO,EAAEL,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KAAyB,yBAAwBR,UAAU,CAACQ,MAAX,CAAkB,CAAlB,EAAqBC,GAAI;AADxG,KANG,EAQH;AACDF,MAAAA,QAAQ,EAAE,QADT;AACmBF,MAAAA,OAAO,EAAG,8BAA6BN,EAAG;AAD7D,KARG;AAHR,IADF,EAgBE;AAAK,IAAA,SAAS,EAAC;AAAf,KAA0BC,UAAU,CAACK,OAArC,CAhBF,EAiBE;AAAK,IAAA,SAAS,EAAC;AAAf,KAAyBL,UAAU,CAACG,IAAX,CAAgBC,QAAzC,CAjBF,EAkBE,mBACGJ,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,EAAG,yBAAwBR,UAAU,CAACQ,MAAX,CAAkB,CAAlB,EAAqBC,GAAI;AAA5D,IAD3B,CAlBF,CADF;AAwBD,CA1BD;;AA4BAX,IAAI,CAACY,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACxCA,EAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACrBC,IAAAA,IAAI,EAAEjB,iBADe;AAErBkB,IAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAcjB;AAFC,GAAvB;AAIA,SAAO;AAAEA,IAAAA,EAAE,EAAEkB,QAAQ,CAACN,OAAO,CAACK,KAAR,CAAcjB,EAAf,EAAmB,EAAnB;AAAd,GAAP;AACD,CAND;;AAYA,eAAeD,IAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\n\nconst Post = ({ id }) => {\n  const { singlePost } = useSelector(state => state.post);\n  return (\n    <>\n      <Helmet\n        title={`${singlePost.User.nickname}님의 글`}\n        description={singlePost.content}\n        meta={[{\n          name: 'description', content: singlePost.content,\n        }, {\n          property: 'og:title', content: `${singlePost.User.nickname}님의 게시글`,\n        }, {\n          property: 'og:description', content: singlePost.content,\n        }, {\n          property: 'og:image', content: singlePost.Images[0] && `http://localhost:3065/${singlePost.Images[0].src}`,\n        }, {\n          property: 'og:url', content: `http://localhost:3060/post/${id}`,\n        }]}\n      />\n      <div itemScope=\"content\">{singlePost.content}</div>\n      <div itemScope=\"author\">{singlePost.User.nickname}</div>\n      <div>\n        {singlePost.Images[0] && <img src={`http://localhost:3065/${singlePost.Images[0].src}`} />}\n      </div>\n    </>\n  );\n};\n\nPost.getInitialProps = async (context) => {\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.query.id,\n  });\n  return { id: parseInt(context.query.id, 10) };\n};\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}